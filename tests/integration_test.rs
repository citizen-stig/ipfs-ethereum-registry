use std::env;
use std::str::FromStr;
use testcontainers::{clients, images};
use web3::contract::{Contract, Options};
use web3::ethabi::Address;

#[tokio::test]
async fn test_full() {
    env_logger::init();
    println!("START");
    let docker = clients::Cli::default();
    println!("2");

    // let node = docker.run(images::google_cloud_sdk_emulators::CloudSdk::datastore(
    //     "test",
    // ));
    let args = images::trufflesuite_ganachecli::GanacheCliArgs {
        network_id: 14,
        number_of_accounts: 10,
        mnemonic: "buffalo they brave owner merit oak buddy brown chapter program nut text".to_string(),
    };
    let ganache = docker.run((images::trufflesuite_ganachecli::GanacheCli::default(), args));
    let blockchain_url = format!("http://127.0.0.1:{}", ganache.get_host_port_ipv4(8545));
    env::set_var("BLOCKCHAIN_URL", &blockchain_url);
    println!("Blockchain URL {}", blockchain_url);

    let ipfs = images::generic::GenericImage::new("ipfs/kubo", "v0.18.1");
    let ipfs_container = docker.run(ipfs);
    let ipfs_url = format!("http://127.0.0.1:{}", ipfs_container.get_host_port_ipv4(5001));
    env::set_var("IPFS_URL", &ipfs_url);
    println!("IPFS URL {}", ipfs_url);


    let http = web3::transports::Http::new(&blockchain_url).unwrap();
    let web3 = web3::Web3::new(http);

    let bytecode = "0x608060405234801561001057600080fd5b506106c1806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80634aaf4a121461004657806366d561d214610076578063b830facb14610092575b600080fd5b610060600480360381019061005b919061040b565b6100c2565b60405161006d9190610495565b60405180910390f35b610090600480360381019061008b919061040b565b610109565b005b6100ac60048036038101906100a7919061040b565b610268565b6040516100b99190610495565b60405180910390f35b600080826040516100d39190610521565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600073ffffffffffffffffffffffffffffffffffffffff166000826040516101319190610521565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146101b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad90610595565b60405180910390fd5b336000826040516101c79190610521565b908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600180600082825461022591906105ee565b925050819055507f8a3849c1382e52abfb6b5d9a4fcc45c12ce16c2c3e0f445f8644102b6c81277e813360405161025d92919061065b565b60405180910390a150565b6000818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610318826102cf565b810181811067ffffffffffffffff82111715610337576103366102e0565b5b80604052505050565b600061034a6102b1565b9050610356828261030f565b919050565b600067ffffffffffffffff821115610376576103756102e0565b5b61037f826102cf565b9050602081019050919050565b82818337600083830152505050565b60006103ae6103a98461035b565b610340565b9050828152602081018484840111156103ca576103c96102ca565b5b6103d584828561038c565b509392505050565b600082601f8301126103f2576103f16102c5565b5b813561040284826020860161039b565b91505092915050565b600060208284031215610421576104206102bb565b5b600082013567ffffffffffffffff81111561043f5761043e6102c0565b5b61044b848285016103dd565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061047f82610454565b9050919050565b61048f81610474565b82525050565b60006020820190506104aa6000830184610486565b92915050565b600081519050919050565b600081905092915050565b60005b838110156104e45780820151818401526020810190506104c9565b60008484015250505050565b60006104fb826104b0565b61050581856104bb565b93506105158185602086016104c6565b80840191505092915050565b600061052d82846104f0565b915081905092915050565b600082825260208201905092915050565b7f66696c6520697320616c72656164792072656769737465726564000000000000600082015250565b600061057f601a83610538565b915061058a82610549565b602082019050919050565b600060208201905081810360008301526105ae81610572565b9050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006105f9826105b5565b9150610604836105b5565b925082820190508082111561061c5761061b6105bf565b5b92915050565b600061062d826104b0565b6106378185610538565b93506106478185602086016104c6565b610650816102cf565b840191505092915050565b600060408201905081810360008301526106758185610622565b90506106846020830184610486565b939250505056fea264697066735822122008989f4efa380097525804fc59a69dba1d7e2719c54ae037bcf92437972f307764736f6c63430008120033";

    let my_account = Address::from_str("E325B5E819346410c54833f700525DFF00472434").unwrap();

    let contract = Contract::deploy(web3.eth(), include_bytes!("../src/abi.json")).unwrap()
        .confirmations(0)
        .options(Options::with(|opt| {
            opt.value = Some(5.into());
            opt.gas_price = Some(5.into());
            opt.gas = Some(3_000_000.into());
        }))
        .execute(
            bytecode,
            (),
            my_account,
        )
        .await.unwrap();
    let contract_address = contract.address();
    println!("DONE DEPLOYMENT at {}", contract_address);
}